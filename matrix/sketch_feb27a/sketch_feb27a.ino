#include <SPI.h>

#include <Adafruit_GFX.h>
#include <Adafruit_NeoMatrix.h>
#include <Adafruit_NeoPixel.h>

#define PIN        6
#define MW         8
#define MH         8
#define BRIGHTNESS 20
#define DELAY_SHOW 1000

Adafruit_NeoMatrix *matrix = new Adafruit_NeoMatrix(MW, MH, PIN,
  NEO_MATRIX_BOTTOM + NEO_MATRIX_RIGHT + NEO_MATRIX_COLUMNS + NEO_MATRIX_ZIGZAG,
  NEO_GRB + NEO_KHZ800);

static const uint16_t PROGMEM RGB_bmp[][64] = {
{0x0FF, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x0FF,
  0x000, 0x0FF, 0x000, 0x0FF, 0x0FF, 0x000, 0x0FF, 0x000, 
  0x000, 0x000, 0x0FF, 0x0FF, 0x0FF, 0x0FF, 0x000, 0x000, 
  0x000, 0x0FF, 0x0FF, 0x0FF, 0x0FF, 0x0FF, 0x0FF, 0x000, 
  0x000, 0x0FF, 0x0FF, 0x0FF, 0x0FF, 0x0FF, 0x0FF, 0x000, 
  0x000, 0x000, 0x0FF, 0x0FF, 0x0FF, 0x0FF, 0x000, 0x000, 
  0x000, 0x0FF, 0x000, 0x0FF, 0x0FF, 0x000, 0x0FF, 0x000, 
  0x0FF, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x0FF,
},
  // 1: 02
{ 0x000, 0x000, 0x000, 0x000, 0x000, 0x0FF, 0x0FF, 0x0FF, 
  0x000, 0x000, 0x880, 0xFF0, 0x0FF, 0x0FF, 0x0FF, 0x0FF, 
  0x000, 0x880, 0xFF0, 0xFF0, 0xFF0, 0x0FF, 0x0FF, 0x0FF, 
  0x000, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0x0FF, 0x0FF, 0x0FF, 
  0x880, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0x0FF, 0x0FF, 
  0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0x0FF, 
  0x880, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0x880, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, },
  // 2: 03
{ 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 
  0x000, 0x000, 0x880, 0xFF0, 0x880, 0x000, 0x000, 0x000, 
  0x000, 0x880, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0x000, 0x000, 
  0x000, 0x880, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0x880, 0x000, 
  0x880, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0x880, 
  0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 
  0x880, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0x880, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, },
// 3: 04
 {0x000, 0x000, 0x000, 0x000, 0x000, 0xF00, 0xF00, 0xF00, 
  0x000, 0x000, 0x880, 0xFF0, 0xF00, 0xF00, 0xF00, 0xF00, 
  0x000, 0x880, 0xFF0, 0xFF0, 0xFF0, 0xF00, 0xF00, 0xF00, 
  0x000, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xF00, 0xF00, 0xF00, 
  0x880, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xF00, 0xF00, 
  0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xF00, 
  0x880, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0x880, 
  0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, },
// 4: 09
{ 0x000, 0x000, 0x880, 0xFF0, 0xF00, 0xF00, 0xF00, 0xF00, 
  0x000, 0x880, 0xFF0, 0xFF0, 0xFF0, 0xF00, 0xF00, 0xF00, 
  0x000, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xF00, 0xF00, 0xF00, 
  0x880, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xF00, 0xF00, 
  0x880, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0x880, 
  0x000, 0xF00, 0x000, 0x000, 0xF00, 0x000, 0x000, 0xF00,
  0xF00, 0x000, 0x000, 0xF00, 0x000, 0x000, 0xF00, 0x000,
  0x000, 0x000, 0xF00, 0x000, 0x000, 0xF00, 0x000, 0x000,},
// 5: 10
 {0x000, 0x000, 0x880, 0xFF0, 0x0FF, 0x0FF, 0x0FF, 0x0FF, 
  0x000, 0x880, 0xFF0, 0xFF0, 0xFF0, 0x0FF, 0x0FF, 0x0FF, 
  0x000, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0x0FF, 0x0FF, 0x0FF, 
  0x880, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0x0FF, 0x0FF, 
  0x880, 0xFF0, 0xF00, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0x880, 
  0x000, 0xF00, 0x000, 0x000, 0xF00, 0x000, 0x000, 0xF00,
  0xF00, 0x000, 0x000, 0xF00, 0x000, 0x000, 0xF00, 0x000,
  0x000, 0x000, 0xF00, 0x000, 0x000, 0xF00, 0x000, 0x000,},
// 6: 11
 {0x000, 0x000, 0x880, 0xFF0, 0xF00, 0xF00, 0xF00, 0xF00, 
  0x000, 0x880, 0xFF0, 0xFF0, 0xFF0, 0xF00, 0xF00, 0xF00, 
  0x000, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xF00, 0xF00, 0xF00, 
  0x880, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xF00, 0xF00, 
  0x880, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0xFF0, 0x880, 
  0x000, 0x000, 0x0FF, 0x000, 0x000, 0x000, 0x0FF, 0x000,
  0x000, 0x0FF, 0x0FF, 0x000, 0x000, 0x0FF, 0x0FF, 0x000,
  0x0FF, 0x0FF, 0x000, 0x000, 0x0FF, 0x0FF, 0x000, 0x000,},
// 7: 13
 { 0xFFF, 0x000, 0x000, 0xFFF, 0xFFF,0x000, 0x000, 0xFFF,
  0x000, 0xFFF, 0x000, 0xFFF, 0xFFF, 0x000, 0xFFF, 0x000,
  0x000, 0x000, 0xFFF, 0xFFF, 0xFFF, 0xFFF, 0x000, 0x000,
  0xFFF, 0xFFF, 0xFFF, 0xFFF, 0xFFF, 0xFFF, 0xFFF, 0xFFF,
  0xFFF, 0xFFF, 0xFFF, 0xFFF, 0xFFF, 0xFFF, 0xFFF, 0xFFF,
  0x000, 0x000, 0xFFF, 0xFFF, 0xFFF, 0xFFF, 0x000, 0x000,
  0x000, 0xFFF, 0x000, 0xFFF, 0xFFF, 0x000, 0xFFF, 0x000,
  0xFFF, 0x000, 0x000, 0xFFF, 0xFFF, 0x000, 0x000, 0xFFF, },
// 8: 50
 {0x222, 0x222, 0x222, 0x222, 0x222, 0x222, 0x222, 0x222, 
  0x222, 0x222, 0x222, 0xAAA, 0xAAA, 0xAAA, 0xAAA, 0xAAA, 
  0xAAA, 0xAAA, 0xAAA, 0xAAA, 0xAAA, 0x222, 0x222, 0x222, 
  0x222, 0x222, 0x222, 0xAAA, 0xAAA, 0xAAA, 0xAAA, 0xAAA, 
  0x222, 0xAAA, 0xAAA, 0xAAA, 0xAAA, 0x222, 0x222, 0x222, 
  0x222, 0x222, 0xAAA, 0xAAA, 0xAAA, 0xAAA, 0xAAA, 0xAAA, 
  0x222, 0xAAA, 0xAAA, 0xAAA, 0xAAA, 0xAAA, 0x222, 0x222, 
  0x222, 0x222, 0x222, 0x222, 0x222, 0x222, 0x222, 0x222,},
};

void fixdrawRGBBitmap(int16_t x, int16_t y, const uint16_t *bitmap, int16_t w, int16_t h) {
  uint16_t RGB_bmp_fixed[w * h];
  for (uint16_t pixel = 0; pixel < w * h; pixel++) {
    uint8_t r, g, b;
    uint16_t color = pgm_read_word(bitmap + pixel);
    b = (color & 0xF00) >> 8;
    g = (color & 0x0F0) >> 4;
    r = color & 0x00F;
    b = map(b, 0, 15, 0, 31);
    g = map(g, 0, 15, 0, 63);
    r = map(r, 0, 15, 0, 31);
    RGB_bmp_fixed[pixel] = (r << 11) + (g << 5) + b;
  }
  matrix->drawRGBBitmap(x, y, RGB_bmp_fixed, w, h);
}

void display_rgbBitmap(uint8_t bmp_num) {
  static uint16_t bmx, bmy;
  fixdrawRGBBitmap(bmx, bmy, RGB_bmp[bmp_num], 8, 8);
  bmx += 8;
  if (bmx >= MW) {bmx = 0;}
  if (!bmx) {bmy += 8;}
  if (bmy >= MH) {bmy = 0;}
  matrix->show();
}

void setup() {
  matrix->begin();
  matrix->setBrightness(BRIGHTNESS);
  matrix->show();
}

void loop() {
  for(int i = 0; i != 9; i++){
  display_rgbBitmap(i);  delay(DELAY_SHOW);
  }
}
